// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DB_URL")
}

model Product {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  url           String
  image         String
  title         String
  currency      String
  currentPrice  Float
  stars         Float          @default(4.5)
  originalPrice Float
  priceHistory  PriceHistory[]
  isOutOfStock  Boolean?       @default(false)
  lowestPrice   Float?
  highestPrice  Float?
  averagePrice  Float?
  discountRate  Float?
  description   String?
  category      String?
  reviewsCount  Int?
  userIds       String[]       @db.ObjectId
  users         User[]         @relation(fields: [userIds], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model PriceHistory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  price     Float
  date      DateTime
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  productIds    String[]  @db.ObjectId
  products      Product[] @relation(fields: [productIds], references: [id])
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
